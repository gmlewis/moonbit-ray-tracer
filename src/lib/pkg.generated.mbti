// Generated using `moon info`, DON'T EDIT IT
package "gmlewis/ray-tracer/lib"

import(
  "gmlewis/image"
)

// Values
const EPSILON : Double = 0.00001

let black : Color

fn camera(Int, Int, Double) -> Camera

fn canvas(Int, Int) -> Canvas

fn checkers_pattern(Array[Color]) -> Pattern

fn color(Double, Double, Double) -> Color

fn cone(minimum? : Double, maximum? : Double, closed? : Bool) -> Shape

fn csg(Operation, Shape, Shape) -> Shape

fn cube() -> Shape

fn cylinder(minimum? : Double, maximum? : Double, closed? : Bool) -> Shape

fn default_world() -> World

fn glass_sphere() -> Shape

fn gradient_checkers_pattern(Array[Color]) -> Pattern

fn gradient_pattern(Array[Color]) -> Pattern

fn gradient_ring_pattern(Array[Color]) -> Pattern

fn group() -> Shape

fn intersection(Double, Shape, u? : Double, v? : Double) -> Intersection

fn intersection_allowed(Operation, Bool, Bool, Bool) -> Bool

fn intersections(Array[Intersection]) -> Intersections

fn mat2(Double, Double, Double, Double) -> Matrix

fn mat3(Double, Double, Double, Double, Double, Double, Double, Double, Double) -> Matrix

fn mat4(Double, Double, Double, Double, Double, Double, Double, Double, Double, Double, Double, Double, Double, Double, Double, Double) -> Matrix

fn mat4ident() -> Matrix

fn mat4zero() -> Matrix

fn material() -> Material

fn parse_obj_file(String) -> ObjFile raise ParserError

fn parse_scene(String) -> ParsedScene raise SceneParseError

fn parse_scene_file(String) -> ParsedScene raise SceneParseError

fn plane() -> Shape

fn point(Double, Double, Double) -> Tuple

fn point_light(Tuple, Color) -> Light

fn ray(Tuple, Tuple) -> Ray

fn ring_pattern(Array[Color]) -> Pattern

fn rotation_x(Double) -> Matrix

fn rotation_y(Double) -> Matrix

fn rotation_z(Double) -> Matrix

fn round_to_fixed(Double, Int) -> Double

fn scaling(Double, Double, Double) -> Matrix

fn shearing(Double, Double, Double, Double, Double, Double) -> Matrix

fn smooth_triangle(Tuple, Tuple, Tuple, Tuple, Tuple, Tuple) -> Shape

fn sphere() -> Shape

fn stripe_pattern(Array[Color]) -> Pattern

fn translation(Double, Double, Double) -> Matrix

fn triangle(Tuple, Tuple, Tuple) -> Shape

fn tuple(Double, Double, Double, Double) -> Tuple

fn vector(Double, Double, Double) -> Tuple

fn view_transform(Tuple, Tuple, Tuple) -> Matrix

let white : Color

fn world() -> World

// Errors
type ParserError
impl Eq for ParserError
impl Show for ParserError

type SceneParseError
impl Eq for SceneParseError
impl Show for SceneParseError

// Types and methods
pub(all) struct Bounds {
  mut min : Tuple
  mut max : Tuple
}
fn Bounds::enlarge(Self, Self) -> Unit
fn Bounds::local_intersect(Self, Ray, Shape) -> Intersections
fn Bounds::new() -> Self
fn Bounds::transform(Self, Matrix) -> Self
fn Bounds::update(Self, Tuple) -> Unit
impl Eq for Bounds
impl Show for Bounds

pub(all) struct CSG {
  operation : Operation
  left : Shape
  right : Shape
}
fn CSG::filter_intersections(Self, Intersections) -> Intersections
impl Eq for CSG
impl Show for CSG

pub(all) struct Camera {
  hsize : Int
  vsize : Int
  field_of_view : Double
  mut transform : Matrix
  pixel_size : Double
  half_width : Double
  half_height : Double
}
fn Camera::ray_for_pixel(Self, Int, Int) -> Ray
fn Camera::render(Self, World) -> Canvas
impl Eq for Camera
impl Show for Camera

pub(all) struct Canvas {
  width : Int
  height : Int
  red : Array[Double]
  green : Array[Double]
  blue : Array[Double]
}
fn Canvas::clear(Self, Color) -> Unit
fn Canvas::pixel_at(Self, Int, Int) -> Color
fn Canvas::to_png(Self) -> Bytes raise @image.SizeError
fn Canvas::to_ppm(Self) -> String
fn Canvas::write_pixel(Self, Int, Int, Color) -> Unit

pub(all) struct CheckersPattern {
  colors : Array[Color]
}
fn CheckersPattern::to_string(Self) -> String
impl PatternTrait for CheckersPattern
impl Eq for CheckersPattern
impl Show for CheckersPattern

pub(all) struct Color {
  red : Double
  green : Double
  blue : Double
}
fn Color::clone(Self) -> Self
fn Color::mul_scalar(Self, Double) -> Self
fn Color::to_string(Self) -> String
impl Add for Color
impl Eq for Color
impl Mul for Color
impl Show for Color
impl Sub for Color

pub(all) struct Computations {
  t : Double
  shape : Shape
  point : Tuple
  eyev : Tuple
  normalv : Tuple
  reflectv : Tuple
  inside : Bool
  over_point : Tuple
  under_point : Tuple
  n1 : Double
  n2 : Double
}
fn Computations::schlick(Self) -> Double

pub(all) struct Cone {
  minimum : Double
  maximum : Double
  closed : Bool
}
impl Object for Cone
impl Eq for Cone
impl Show for Cone

pub(all) struct Cube {
}
impl Object for Cube
impl Eq for Cube
impl Show for Cube

pub(all) struct Cylinder {
  minimum : Double
  maximum : Double
  closed : Bool
}
impl Object for Cylinder
impl Eq for Cylinder
impl Show for Cylinder

pub(all) struct GradientCheckersPattern {
  colors : Array[Color]
}
fn GradientCheckersPattern::to_string(Self) -> String
impl PatternTrait for GradientCheckersPattern
impl Eq for GradientCheckersPattern
impl Show for GradientCheckersPattern

pub(all) struct GradientPattern {
  colors : Array[Color]
}
fn GradientPattern::to_string(Self) -> String
impl PatternTrait for GradientPattern
impl Eq for GradientPattern
impl Show for GradientPattern

pub(all) struct GradientRingPattern {
  colors : Array[Color]
}
fn GradientRingPattern::to_string(Self) -> String
impl PatternTrait for GradientRingPattern
impl Eq for GradientRingPattern
impl Show for GradientRingPattern

pub(all) struct Group {
  children : Array[Shape]
  mut bounds : Bounds?
}
fn Group::bounds(Self) -> Bounds
fn Group::local_intersect(Self, Shape, Ray) -> Intersections
fn Group::local_normal_at(Self, Tuple) -> Tuple
fn Group::output(Self, &Logger) -> Unit
fn Group::to_string(Self) -> String

pub(all) struct Intersection {
  t : Double
  shape : Shape
  u : Double
  v : Double
}
fn Intersection::prepare_computations(Self, Ray, xs? : Intersections) -> Computations
fn Intersection::to_string(Self) -> String
impl Eq for Intersection
impl Show for Intersection

pub(all) struct Intersections {
  count : Int
  xs : Array[Intersection]
  hit : Intersection?
}
fn Intersections::from_ts(Array[Double], Shape) -> Self
fn Intersections::hit(Self) -> Intersection?
fn Intersections::op_get(Self, Int) -> Intersection
fn Intersections::to_ts(Self) -> Array[Double]

pub(all) struct Light {
  position : Tuple
  intensity : Color
}
impl Eq for Light
impl Show for Light

pub(all) struct Material {
  mut color : Color
  mut ambient : Double
  mut diffuse : Double
  mut specular : Double
  mut shininess : Double
  mut reflective : Double
  mut transparency : Double
  mut refractive_index : Double
  mut pattern : Pattern?
}
fn Material::lighting(Self, Light, Tuple, Tuple, Tuple, in_shadow? : Bool, shape? : Shape?) -> Color
impl Eq for Material
impl Show for Material

pub(all) struct Matrix(Array[MatrixRow])
fn Matrix::clone(Self) -> Self
fn Matrix::cofactor(Self, Int, Int) -> Double
fn Matrix::copy(Self, Self) -> Unit
fn Matrix::determinant(Self) -> Double
fn Matrix::dump(Self) -> String
#deprecated
fn Matrix::inner(Self) -> Array[MatrixRow]
fn Matrix::inverse(Self) -> Self
fn Matrix::is_invertible(Self) -> Bool
fn Matrix::minor(Self, Int, Int) -> Double
fn Matrix::mul_tuple(Self, Tuple) -> Tuple
fn Matrix::num_cols(Self) -> Int
fn Matrix::num_rows(Self) -> Int
fn Matrix::op_get(Self, Int) -> MatrixRow
fn Matrix::rotate_x(Self, Double) -> Self
fn Matrix::rotate_y(Self, Double) -> Self
fn Matrix::rotate_z(Self, Double) -> Self
fn Matrix::scale(Self, Double, Double, Double) -> Self
fn Matrix::shear(Self, Double, Double, Double, Double, Double, Double) -> Self
fn Matrix::submatrix(Self, Int, Int) -> Self
fn Matrix::to_string(Self) -> String
fn Matrix::translate(Self, Double, Double, Double) -> Self
fn Matrix::transpose(Self) -> Self
impl Eq for Matrix
impl Mul for Matrix
impl Show for Matrix

pub(all) struct MatrixRow(Array[Double])
#deprecated
fn MatrixRow::inner(Self) -> Array[Double]
fn MatrixRow::op_get(Self, Int) -> Double
fn MatrixRow::op_set(Self, Int, Double) -> Unit
impl Show for MatrixRow

pub(all) struct ObjFile {
  default_group : Shape
  ignored_lines : Int
  vertices : Array[Tuple]
  normals : Array[Tuple]
  named_groups : Map[String, Shape]
}
fn ObjFile::obj_to_group(Self) -> Shape

pub(all) enum Operation {
  Union
  Intersection
  Difference
}
impl Eq for Operation
impl Show for Operation

pub(all) struct ParsedScene {
  world : World
  camera : Camera
  render_settings : RenderSettings
  metadata : SceneMetadata
}

pub(all) struct Pattern {
  pattern : &PatternTrait
  mut transform : Matrix
  mut inv_transform : Matrix
}
fn Pattern::new(&PatternTrait) -> Self
fn Pattern::pattern_at_shape(Self, Shape, Tuple) -> Color
fn Pattern::set_pattern_transform(Self, Matrix) -> Unit
impl PatternTrait for Pattern
impl Eq for Pattern
impl Show for Pattern

pub(all) struct Plane {
}
impl Object for Plane
impl Eq for Plane
impl Show for Plane

pub(all) struct Ray {
  origin : Tuple
  direction : Tuple
}
fn Ray::position(Self, Double) -> Tuple
fn Ray::transform(Self, Matrix) -> Self
impl Eq for Ray
impl Show for Ray

pub(all) struct RenderSettings {
  width : Int
  height : Int
  samples : Int
  max_bounces : Int
  background : Color
}
impl Eq for RenderSettings
impl Show for RenderSettings

pub(all) enum Renderable {
  Object(&Object)
  Group(Group)
  Triangle(Triangle)
  SmoothTriangle(SmoothTriangle)
  CSG(CSG)
}
impl Show for Renderable

pub(all) struct RingPattern {
  colors : Array[Color]
}
fn RingPattern::to_string(Self) -> String
impl PatternTrait for RingPattern
impl Eq for RingPattern
impl Show for RingPattern

pub(all) struct SceneMetadata {
  name : String
  description : String
  version : String
}
impl Eq for SceneMetadata
impl Show for SceneMetadata

pub(all) struct Shape {
  object : Renderable
  mut material : Material
  mut transform : Matrix
  mut inv_transform : Matrix
  mut parent : Shape?
  mut bounds : Bounds?
  id : UInt
}
fn Shape::add_child(Self, Self) -> Unit
fn Shape::bounds(Self) -> Bounds
fn Shape::children(Self) -> Array[Self]
fn Shape::includes_shape(Self, Self) -> Bool
fn Shape::intersect(Self, Ray) -> Intersections
fn Shape::local_intersect(Self, Ray) -> Intersections
fn Shape::local_normal_at(Self, Tuple, hit? : Intersection?) -> Tuple
fn Shape::new(Renderable) -> Self
fn Shape::new_csg(CSG) -> Self
fn Shape::new_group(Group) -> Self
fn Shape::new_object(&Object) -> Self
fn Shape::new_smooth_triangle(SmoothTriangle) -> Self
fn Shape::new_triangle(Triangle) -> Self
fn Shape::normal_at(Self, Tuple, hit? : Intersection?) -> Tuple
fn Shape::normal_to_world(Self, Tuple) -> Tuple
fn Shape::set_transform(Self, Matrix) -> Unit
fn Shape::world_to_object(Self, Tuple) -> Tuple
impl Eq for Shape
impl Show for Shape

pub(all) struct SmoothTriangle {
  p1 : Tuple
  p2 : Tuple
  p3 : Tuple
  n1 : Tuple
  n2 : Tuple
  n3 : Tuple
  e1 : Tuple
  e2 : Tuple
  bounds : Bounds
}
fn SmoothTriangle::bounds(Self) -> Bounds
fn SmoothTriangle::local_intersect(Self, Ray) -> Array[(Double, Double, Double)]
fn SmoothTriangle::local_normal_at(Self, Tuple, Intersection) -> Tuple
impl Eq for SmoothTriangle
impl Show for SmoothTriangle

pub(all) struct Sphere {
}
impl Object for Sphere
impl Eq for Sphere
impl Show for Sphere

pub(all) struct StripePattern {
  colors : Array[Color]
}
fn StripePattern::to_string(Self) -> String
impl PatternTrait for StripePattern
impl Eq for StripePattern
impl Show for StripePattern

pub(all) struct Triangle {
  p1 : Tuple
  p2 : Tuple
  p3 : Tuple
  e1 : Tuple
  e2 : Tuple
  normal : Tuple
  bounds : Bounds
}
fn Triangle::bounds(Self) -> Bounds
fn Triangle::local_intersect(Self, Ray) -> Array[(Double, Double, Double)]
fn Triangle::local_normal_at(Self, Tuple) -> Tuple
impl Eq for Triangle
impl Show for Triangle

pub(all) struct Tuple {
  mut x : Double
  mut y : Double
  mut z : Double
  mut w : Double
}
fn Tuple::abs(Self) -> Self
fn Tuple::cross(Self, Self) -> Self
fn Tuple::div_scalar(Self, Double) -> Self
fn Tuple::dot(Self, Self) -> Double
fn Tuple::is_point(Self) -> Bool
fn Tuple::is_vector(Self) -> Bool
fn Tuple::magnitude(Self) -> Double
fn Tuple::mul_scalar(Self, Double) -> Self
fn Tuple::normalize(Self) -> Self
fn Tuple::op_div(Self, Self) -> Self
fn Tuple::op_get(Self, Int) -> Double
fn Tuple::op_set(Self, Int, Double) -> Unit
fn Tuple::reflect(Self, Self) -> Self
fn Tuple::to_string(Self) -> String
impl Add for Tuple
impl Eq for Tuple
impl Mul for Tuple
impl Neg for Tuple
impl Show for Tuple
impl Sub for Tuple

pub(all) struct World {
  mut shapes : Array[Shape]
  mut lights : Array[Light]
}
fn World::color_at(Self, Ray, remaining? : Int) -> Color
fn World::intersect_world(Self, Ray) -> Intersections
fn World::is_shadowed(Self, Tuple, light? : Light) -> Bool
fn World::reflected_color(Self, Computations, Int) -> Color
fn World::refracted_color(Self, Computations, Int) -> Color
fn World::shade_hit(Self, Computations, remaining? : Int) -> Color

// Type aliases

// Traits
pub(open) trait Object : Show {
  local_intersect(Self, Ray) -> Array[Double]
  local_normal_at(Self, Tuple) -> Tuple
  bounds(Self) -> Bounds
}

pub(open) trait PatternTrait : Show {
  pattern_at(Self, Tuple) -> Color
  clone(Self) -> Pattern
}

